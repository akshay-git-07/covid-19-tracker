{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","PaymentResponse","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","setZoom","mapCountries","setMapCountries","setCasesType","respose","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e693d5f.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card className={`infoBox ${active && 'infoBox--selected'} ${ isRed && 'infoBox--red'}`} onClick={props.onClick} >\r\n            <CardContent>\r\n                <Typography className='infoBox__title' color='textSecondary'>{title}</Typography>\r\n\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                <Typography className='infoBox__total' color='textSecondary'>{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204,16,52)\",\r\n    // half_op: \"rgba(204,16,52,0.5)\",\r\n    mulitiplier: 800,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    // rgb: \"rgb(125,215,29)\",\r\n    // half_op: \"rgba(125,215,29,0.5)\",\r\n    mulitiplier: 1200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"#C0C0C0\",\r\n    // rgb: \"rgb(251,68,67)\",\r\n    // half_op: \"rgba(251,68,67,0.5)\",\r\n    mulitiplier: 2000,\r\n  },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType) => (\r\n    data.map(country => (\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        pathOptions={{\r\n            color: casesTypeColors[casesType].hex,\r\n            fillColor: casesTypeColors[casesType].hex,\r\n        }}\r\n        radius={\r\n            Math.sqrt(country[casesType] / 10) *\r\n            casesTypeColors[casesType].mulitiplier\r\n        }\r\n        >\r\n            <Popup>\r\n            <div className=\"info-container\">\r\n                <div\r\n                    className=\"info-flag\"\r\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                />\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">\r\n                    Cases: {numeral(country.cases).format(\"0,0\")}\r\n                </div>\r\n                <div className=\"info-recovered\">\r\n                    Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                </div>\r\n                <div className=\"info-deaths\">\r\n                    Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                </div>\r\n            </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React from 'react';\r\nimport { MapContainer, TileLayer, useMap} from 'react-leaflet';\r\nimport './Map.css';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, center, zoom, casesType }) {\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <MapContainer\r\n            className=\"map\"\r\n            center={center}\r\n            zoom={zoom}\r\n            scrollWheelZoom={false}\r\n        >\r\n            <ChangeView center={center} zoom={zoom} />\r\n            <TileLayer\r\n                url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {showDataOnMap(countries, casesType)}\r\n        </MapContainer>\r\n    )\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport './Table.css'\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({ country, cases }) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                    </tr>    \r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import numeral from 'numeral';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\nfunction LineGraph({ casesType, ...props } ) {\r\n    const [ data, setData ] = useState({});\r\n\r\n    const buildChartData = (data, casesType) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for(let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            });\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={PaymentResponse.className}>\r\n            {data?.length > 0 && (\r\n                <Line data={{\r\n                    datasets: [{\r\n                        backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n                        borderColor: '#CC1034',\r\n                        data: data,\r\n                    },]\r\n                }}\r\n                options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import './App.css';\nimport { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const [ countries, setCountries ] = useState([]);\n  const [ country, setCountry ] = useState('worldwide');\n  const [ countryInfo, setCountryInfo ] = useState({});\n  const [ tableData, setTableData ] = useState([]);\n  const [ mapCenter, setMapCenter ] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [ zoom, setZoom ] = useState(3);\n  const [ mapCountries, setMapCountries ] = useState([]);\n  const [ casesType, setCasesType ] = useState('cases');\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(respose => respose.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n        \n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      })\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(respose => respose.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      console.log(data);\n\n      countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setZoom(4);\n    });\n\n  };\n\n  console.log(countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className='app__header'>\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' value={country} onChange={onCountryChange}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              { countries.map((country) => (<MenuItem value={country.value}>{country.name}</MenuItem>))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app__stats'>\n          <InfoBox isRed active={casesType === 'cases'} onClick={(e) => setCasesType(\"cases\")} title='Coronavirus cases' cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox active={casesType === 'recovered'} onClick={(e) => setCasesType(\"recovered\")} title='Recovered' cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox isRed active={casesType === 'deaths'} onClick={(e) => setCasesType(\"deaths\")} title='Deaths' cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n        </div>\n\n        <Map center={mapCenter} zoom={zoom} countries={mapCountries} casesType={casesType} />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h1>Live cases by countries</h1>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}